---
export const prerender = false;

import Layout from "../../../../../layouts/Layout.astro";
import ApiDocEditor from "../../../../../components/reactJS/ApiDocEditor";
import { supabase } from "../../../../../lib/supabase";
import { hasProjectAccess, getProject } from "../../../../../lib/supabase";

// Get the project ID from the URL
const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/docs/dashboard');
}

// Check if user is logged in
const { data: { session } } = await supabase.auth.getSession();
if (!session) {
  return Astro.redirect('/docs/login');
}

// Check if user has access to this project
const hasAccess = await hasProjectAccess(id);
if (!hasAccess) {
  return Astro.redirect('/docs/dashboard');
}

// Get project details
let project;
try {
  project = await getProject(id);
} catch (error) {
  console.error('Error fetching project:', error);
  return Astro.redirect('/docs/dashboard');
}

// Get workspace details
const { data: workspace } = await supabase
  .from('workspaces')
  .select('id, name')
  .eq('id', project.workspace_id)
  .single();
---

<Layout
  title="New API Endpoint - Documentation Platform"
  description={`Create a new API endpoint for ${project.name}`}
>
  <main class="container mx-auto px-4 py-8">
    <div class="mb-8">
      <div class="text-sm breadcrumbs mb-2">
        <a href="/docs/dashboard" class="text-gray-500 hover:text-gray-700">Dashboard</a>
        <span class="mx-2 text-gray-400">/</span>
        <a href={`/docs/workspaces/${workspace?.id}`} class="text-gray-500 hover:text-gray-700">{workspace?.name}</a>
        <span class="mx-2 text-gray-400">/</span>
        <a href={`/docs/projects/${id}`} class="text-gray-500 hover:text-gray-700">{project.name}</a>
        <span class="mx-2 text-gray-400">/</span>
        <span class="text-gray-700">New API Endpoint</span>
      </div>
    </div>
    
    <div class="bg-white rounded-lg shadow-sm p-6">
      <ApiDocEditor client:load projectId={id} />
    </div>
  </main>
</Layout>
