---
export const prerender = false;

import Layout from "../../../../../layouts/Layout.astro";
import DocEditor from "../../../../../components/reactJS/DocEditor";
import { supabase } from "../../../../../lib/supabase";
import { hasProjectAccess, getProject } from "../../../../../lib/supabase";

// Get the project ID and document ID from the URL
const { id, docId } = Astro.params;

if (!id || !docId) {
  return Astro.redirect("/docs/dashboard");
}

// Check if user is logged in
const {
  data: { session },
} = await supabase.auth.getSession();
if (!session) {
  return Astro.redirect("/docs/login");
}

// Check if user has access to this project
const hasAccess = await hasProjectAccess(id);
if (!hasAccess) {
  return Astro.redirect("/docs/dashboard");
}

// Get project details
let project;
try {
  project = await getProject(id);
} catch (error) {
  console.error("Error fetching project:", error);
  return Astro.redirect("/docs/dashboard");
}

// Get document details
const { data: document, error } = await supabase
  .from("documentation")
  .select("*")
  .eq("id", docId)
  .eq("project_id", id)
  .single();

if (error || !document) {
  console.error("Error fetching document:", error);
  return Astro.redirect(`/docs/projects/${id}`);
}

// Get workspace details
const { data: workspace } = await supabase
  .from("workspaces")
  .select("id, name")
  .eq("id", project.workspace_id)
  .single();

// Check if we're in view mode
const viewMode = Astro.url.searchParams.get("view") === "true";
---

<Layout
  title={`${document.title || "Untitled Document"} - Documentation Platform`}
  description={`Documentation for ${project.name}`}
>
  <main class="container mx-auto px-4 py-8">
    <div class="mb-8">
      <div class="text-sm breadcrumbs mb-2">
        <a href="/docs/dashboard" class="text-gray-500 hover:text-gray-700"
          >Dashboard</a
        >
        <span class="mx-2 text-gray-400">/</span>
        <a
          href={`/docs/workspaces/${workspace?.id}`}
          class="text-gray-500 hover:text-gray-700">{workspace?.name}</a
        >
        <span class="mx-2 text-gray-400">/</span>
        <a
          href={`/docs/projects/${id}`}
          class="text-gray-500 hover:text-gray-700">{project.name}</a
        >
        <span class="mx-2 text-gray-400">/</span>
        <span class="text-gray-700"
          >{document.title || "Untitled Document"}</span
        >
      </div>

      {
        viewMode && (
          <div class="flex justify-between items-center">
            <h1 class="text-3xl font-bold">
              {document.title || "Untitled Document"}
            </h1>
            <a
              href={`/docs/projects/${id}/docs/${docId}`}
              class="bg-indigo-600 text-white hover:bg-indigo-700 px-4 py-2 rounded-md text-sm font-medium"
            >
              Edit Document
            </a>
          </div>
        )
      }
    </div>

    <div class="bg-white rounded-lg shadow-sm p-6">
      {
        viewMode ? (
          <div class="prose max-w-none" id="markdown-content" />
        ) : (
          <DocEditor
            client:load
            documentationId={docId}
            initialContent={document.content}
          />
        )
      }
    </div>
  </main>
</Layout>

<script define:vars={{ id, docId }}>
  // Add a view mode toggle
  document.addEventListener("DOMContentLoaded", () => {
    const urlParams = new URLSearchParams(window.location.search);
    const viewMode = urlParams.get("view") === "true";

    if (!viewMode) {
      // Add a view button to the toolbar
      const toolbarActions = document.querySelector(".toolbar-actions");
      if (toolbarActions) {
        const viewButton = document.createElement("a");
        viewButton.href = `/docs/projects/${id}/docs/${docId}?view=true`;
        viewButton.className =
          "bg-gray-100 text-gray-800 hover:bg-gray-200 px-4 py-1 rounded text-sm font-medium";
        viewButton.textContent = "View Mode";
        toolbarActions.prepend(viewButton);
      }
    }
  });
</script>

<style>
  .prose h1 {
    font-size: 2.25rem;
    font-weight: 700;
    margin-top: 0;
    margin-bottom: 1rem;
  }

  .prose h2 {
    font-size: 1.875rem;
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 1rem;
  }

  .prose h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }

  .prose p {
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  .prose ul {
    margin-top: 1rem;
    margin-bottom: 1rem;
    padding-left: 1.5rem;
    list-style-type: disc;
  }

  .prose li {
    margin-top: 0.25rem;
    margin-bottom: 0.25rem;
  }

  .prose code {
    font-family: monospace;
    background-color: #f3f4f6;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
  }

  .prose pre {
    background-color: #1f2937;
    color: #f9fafb;
    padding: 1rem;
    border-radius: 0.375rem;
    overflow-x: auto;
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  .prose pre code {
    background-color: transparent;
    padding: 0;
    color: inherit;
  }

  .prose a {
    color: #4f46e5;
    text-decoration: underline;
  }

  .prose a:hover {
    color: #4338ca;
  }
</style>

<script is:inline define:vars={{ viewMode, document }}>
  // Simple markdown renderer (in a real app, use a proper markdown library)
  function renderMarkdown(markdown) {
    if (!markdown) return "";

    // This is a very basic implementation - in a real app, use a library like marked.js
    let html = markdown
      // Headers
      .replace(/^# (.*$)/gm, "<h1>$1</h1>")
      .replace(/^## (.*$)/gm, "<h2>$1</h2>")
      .replace(/^### (.*$)/gm, "<h3>$1</h3>")
      // Bold
      .replace(/\*\*(.*)\*\*/gm, "<strong>$1</strong>")
      // Italic
      .replace(/\*(.*)\*/gm, "<em>$1</em>")
      // Code blocks
      .replace(/```([\s\S]*?)```/gm, "<pre><code>$1</code></pre>")
      // Inline code
      .replace(/`([^`]+)`/gm, "<code>$1</code>")
      // Lists
      .replace(/^\- (.*$)/gm, "<li>$1</li>")
      // Links
      .replace(/\[([^\]]+)\]\(([^)]+)\)/gm, '<a href="$2">$1</a>')
      // Paragraphs
      .replace(/^\s*(\n)?(.+)/gm, function (m) {
        return /\<(\/)?(h\d|ul|ol|li|blockquote|pre|img)/.test(m)
          ? m
          : "<p>" + m + "</p>";
      })
      // Line breaks
      .replace(/\n/gm, "<br>");

    // Fix lists
    html = html
      .replace(/<li>(.+)<\/li>/g, function (m, content) {
        return "<ul>" + m + "</ul>";
      })
      .replace(/<\/ul><ul>/g, "");

    return html;
  }

  // If in view mode, render the markdown content
  if (viewMode && document) {
    document.addEventListener("DOMContentLoaded", () => {
      const contentElement = document.getElementById("markdown-content");
      if (contentElement) {
        contentElement.innerHTML = renderMarkdown(document.content || "");
      }
    });
  }
</script>
