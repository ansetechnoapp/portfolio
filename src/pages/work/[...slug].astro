---
export const prerender = true;

import { type CollectionEntry, getCollection } from "astro:content";

import Layout from "../../layouts/Layout.astro";

import ContactCTA from "../../components/ContactCTA.astro";
import Hero from "../../components/Hero.astro";
import Icon from "../../components/reactJS/Icon";
import Pill from "../../components/reactJS/Pill";
import TabbedInterface from "../../components/reactJS/TabbedInterface";
import ProjectFeatures from "../../components/reactJS/ProjectFeatures";
import ImageGallery from "../../components/reactJS/ImageGallery";

interface Props {
  entry: CollectionEntry<"work">;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
  const work = await getCollection("work");
  return work.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Enhanced SEO metadata for projects
const projectTitle = `${entry.data.title} | Kevin Otty - Développeur Web & Mobile`;
const projectDescription = entry.data.description || `Découvrez ${entry.data.title}, un projet de développement ${entry.data.device === 'mobile' ? 'mobile' : 'web'} réalisé par Kevin Otty. Technologies utilisées: ${entry.data.tech?.join(', ') || 'développement moderne'}.`;

// Prepare project metadata for SEO
const projectMetadata = {
  publishedTime: entry.data.publishDate
    ? new Date(entry.data.publishDate).toISOString()
    : new Date().toISOString(),
  modifiedTime: new Date().toISOString(),
  tags: entry.data.tags || [],
};
---

<Layout
  title={projectTitle}
  description={projectDescription}
  image={entry.data.img || "/assets/social-preview.jpg"}
  type="project"
  article={projectMetadata}
>
  <div class="project-container site-content-spacing">
    <div class="project-header">
      <div class="header-content">
        <a class="back-link" href="/work/"
          ><Icon icon="arrow-left" /> Back to Projects</a
        >
        <h1 class="project-title">{entry.data.title}</h1>
        <p class="project-description">{entry.data.description}</p>

        <div class="meta-container">
          <div class="tags-container">
            <h3>Category</h3>
            <div class="tags">
              {entry.data.tags.map((t) => <Pill>{t}</Pill>)}
            </div>
          </div>

          {
            entry.data.tech && (
              <div class="tech-container">
                <h3>Technologies</h3>
                <div class="tech-list">
                  {entry.data.tech.map((tech) => (
                    <Pill>{tech}</Pill>
                  ))}
                </div>
              </div>
            )
          }
        </div>

        <div class="cta-buttons">
          {
            entry.data.liveDemo && (
              <a
                href={entry.data.liveDemo}
                class="btn primary enhanced-btn"
                target="_blank"
                rel="noopener"
              >
                <Icon icon="rocket-launch" />
                <span>Live Demo</span>
                <svg class="btn-arrow" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M7 17L17 7M17 7H7M17 7V17"/>
                </svg>
              </a>
            )
          }
          {
            entry.data.github && (
              <a
                href={entry.data.github}
                class="btn secondary enhanced-btn"
                target="_blank"
                rel="noopener"
              >
                <Icon icon="github-logo" />
                <span>View Code</span>
                <svg class="btn-arrow" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M7 17L17 7M17 7H7M17 7V17"/>
                </svg>
              </a>
            )
          }
          <button
            class="btn tertiary enhanced-btn share-btn"
            onclick="shareProject()"
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
              <polyline points="16,6 12,2 8,6"/>
              <line x1="12" y1="2" x2="12" y2="15"/>
            </svg>
            <span>Share Project</span>
          </button>
        </div>
      </div>
    </div>

    <div class="project-showcase">
      {
        entry.data.img && (
          <div class="main-image">
            <picture>
              {/* AVIF format */}
              <source
                type="image/avif"
                srcset={`${entry.data.img.replace(/\.(jpg|jpeg|png|gif)$/i, "_optimized.avif")} 1x, ${entry.data.img.replace(/\.(jpg|jpeg|png|gif)$/i, "_640w.avif")} 640w, ${entry.data.img.replace(/\.(jpg|jpeg|png|gif)$/i, "_1024w.avif")} 1024w`}
                sizes="(max-width: 768px) 100vw, 1200px"
              />
              {/* WebP format */}
              <source
                type="image/webp"
                srcset={`${entry.data.img.replace(/\.(jpg|jpeg|png|gif)$/i, "_optimized.webp")} 1x, ${entry.data.img.replace(/\.(jpg|jpeg|png|gif)$/i, "_640w.webp")} 640w, ${entry.data.img.replace(/\.(jpg|jpeg|png|gif)$/i, "_1024w.webp")} 1024w`}
                sizes="(max-width: 768px) 100vw, 1200px"
              />
              {/* Fallback format */}
              <img
                src={entry.data.img}
                alt={entry.data.img_alt || ""}
                loading="lazy"
                decoding="async"
              />
            </picture>
          </div>
        )
      }
    </div>

    <div class="project-content">
      <div class="content-wrapper">
        {entry.data.features && entry.data.features.length > 0 ? (
          <div class="project-tabs">
            <!-- Tab Navigation -->
            <div class="tab-nav border-b border-gray-200 dark:border-gray-700 mb-6">
              <nav class="flex space-x-8 overflow-x-auto">
                <button class="tab-btn active py-3 px-1 border-b-2 border-indigo-500 text-indigo-600 dark:text-indigo-400 font-medium text-sm transition-colors duration-200" data-tab="overview">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Project Overview
                </button>
                <button class="tab-btn py-3 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 font-medium text-sm transition-colors duration-200" data-tab="features">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Key Features
                </button>
                <button class="tab-btn py-3 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 font-medium text-sm transition-colors duration-200" data-tab="technologies">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                  </svg>
                  Technologies Used
                </button>
              </nav>
            </div>

            <!-- Tab Content -->
            <div class="tab-content">
              <div id="overview-tab" class="tab-panel active">
                <Content />
              </div>

              <div id="features-tab" class="tab-panel hidden">
                <ProjectFeatures
                  client:load
                  features={entry.data.features}
                />
              </div>

              <div id="technologies-tab" class="tab-panel hidden space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {entry.data.tech?.map((tech, index) => (
                    <div key={index} class="tech-card bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
                      <div class="flex items-center gap-3">
                        <div class="w-10 h-10 bg-indigo-100 dark:bg-indigo-900/30 rounded-lg flex items-center justify-center">
                          <svg class="w-5 h-5 text-indigo-600 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                          </svg>
                        </div>
                        <span class="font-medium text-gray-900 dark:text-white">{tech}</span>
                      </div>
                    </div>
                  ))}
                </div>
                <div class="prose dark:prose-invert max-w-none">
                  <h3>Technology Stack Details</h3>
                  <p>This project leverages modern web technologies to deliver a robust and scalable solution. Each technology was carefully chosen to optimize performance, maintainability, and user experience.</p>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <Content />
        )}
      </div>

      {
        entry.data.additionalImages &&
          entry.data.additionalImages.length > 0 && (
            <div class="additional-images">
              <h2>Project Gallery</h2>
              <ImageGallery
                client:load
                images={entry.data.additionalImages.map(img => ({
                  url: img.url,
                  alt: img.alt || "",
                  caption: img.caption
                }))}
                columns={3}
                class="mt-6"
              />
            </div>
          )
      }
    </div>

    <div class="next-section">
      <h2>Interested in working together?</h2>
      <ContactCTA />
    </div>
  </div>
</Layout>

<style>
  /* Modern Project Detail Page Styling */
  .project-container {
    max-width: 1400px;
    margin: 0 auto;
  }

  .project-header {
    padding-top: 2rem;
    padding-bottom: 3rem;
  }

  .header-content {
    max-width: 900px;
    margin: 0 auto;
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    font-size: var(--text-sm);
    color: var(--gray-400);
    margin-bottom: 2rem;
    transition: color 0.2s ease;
    text-decoration: none;
  }

  .back-link:hover {
    color: var(--accent);
  }

  .project-title {
    font-size: clamp(2.5rem, 5vw, 3.5rem);
    line-height: 1.1;
    font-weight: 700;
    margin-bottom: 1.5rem;
    background: var(
      --gradient-text,
      linear-gradient(to right, var(--gray-0), var(--accent-light))
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .project-description {
    font-size: var(--text-lg);
    max-width: 65ch;
    margin-bottom: 3rem;
    color: var(--gray-300);
    line-height: 1.6;
  }

  .meta-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    margin-bottom: 2.5rem;
    border-top: 1px solid var(--gray-800);
    border-bottom: 1px solid var(--gray-800);
    padding: 2rem 0;
  }

  .tags-container h3,
  .tech-container h3 {
    font-size: var(--text-md);
    margin-bottom: 1rem;
    color: var(--gray-200);
  }

  .tags,
  .tech-list {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .cta-buttons {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 600;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  .btn.primary {
    background: var(--accent);
    color: var(--gray-999);
  }

  .btn.primary:hover {
    background: var(--accent-light);
  }

  .btn.secondary {
    background: var(--gray-800);
    color: var(--gray-100);
  }

  .btn.secondary:hover {
    background: var(--gray-700);
  }

  .btn.tertiary {
    background: transparent;
    color: var(--gray-200);
    border: 2px solid var(--gray-700);
  }

  .btn.tertiary:hover {
    background: var(--gray-800);
    border-color: var(--gray-600);
  }

  /* Enhanced button styles */
  .enhanced-btn {
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    min-width: 140px;
  }

  .enhanced-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s ease;
  }

  .enhanced-btn:hover::before {
    left: 100%;
  }

  .btn-arrow {
    transition: transform 0.2s ease;
  }

  .enhanced-btn:hover .btn-arrow {
    transform: translate(2px, -2px);
  }

  .share-btn {
    position: relative;
  }

  .share-btn.copied::after {
    content: 'Copied!';
    position: absolute;
    top: -40px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--accent-regular);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    white-space: nowrap;
    animation: fadeInOut 2s ease;
  }

  @keyframes fadeInOut {
    0%, 100% { opacity: 0; transform: translateX(-50%) translateY(10px); }
    20%, 80% { opacity: 1; transform: translateX(-50%) translateY(0); }
  }

  .project-showcase {
    margin: 3rem 0;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 10px 30px -15px rgba(0, 0, 0, 0.5);
    background: var(--gradient-subtle);
  }

  .main-image {
    width: 100%;
    height: auto;
    border-radius: 0.75rem;
    overflow: hidden;
  }

  .main-image img {
    width: 100%;
    height: auto;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .project-content {
    max-width: 900px;
    margin: 4rem auto;
  }

  .content-wrapper {
    font-size: var(--text-md);
    line-height: 1.8;
    color: var(--gray-300);
  }

  .content-wrapper :global(h1),
  .content-wrapper :global(h2) {
    margin: 2.5rem 0 1.5rem;
    font-size: clamp(1.5rem, 3vw, 2rem);
    line-height: 1.2;
    color: var(--gray-100);
  }

  .content-wrapper :global(h3),
  .content-wrapper :global(h4) {
    margin: 2rem 0 1rem;
    font-size: clamp(1.2rem, 2vw, 1.5rem);
    line-height: 1.3;
    color: var(--gray-100);
  }

  .content-wrapper :global(p) {
    margin-bottom: 1.5rem;
  }

  .content-wrapper :global(ul),
  .content-wrapper :global(ol) {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  .content-wrapper :global(li) {
    margin-bottom: 0.75rem;
  }

  .content-wrapper :global(blockquote) {
    margin: 2rem 0;
    padding: 1.5rem 2rem;
    border-left: 4px solid var(--accent);
    background: var(--gray-900);
    border-radius: 0 0.5rem 0.5rem 0;
  }

  .content-wrapper :global(blockquote p) {
    font-size: var(--text-lg);
    font-style: italic;
    font-weight: 500;
    color: var(--gray-200);
  }

  .content-wrapper :global(pre) {
    margin: 1.5rem 0;
    padding: 1.5rem;
    border-radius: 0.5rem;
    background: var(--gray-950);
    overflow-x: auto;
  }

  .content-wrapper :global(img) {
    max-width: 100%;
    border-radius: 0.75rem;
    margin: 2rem 0;
  }

  .additional-images {
    margin-top: 4rem;
  }

  .additional-images h2 {
    margin-bottom: 2rem;
    font-size: var(--text-xl);
    color: var(--gray-100);
  }

  .image-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .gallery-image {
    border-radius: 0.75rem;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }

  .gallery-image:hover {
    transform: translateY(-5px);
  }

  .gallery-image img {
    width: 100%;
    height: 250px;
    object-fit: cover;
  }

  .next-section {
    text-align: center;
    padding: 5rem 0;
    background: var(--gray-950);
    border-radius: 1rem;
    margin: 3rem 0;
  }

  .next-section h2 {
    font-size: var(--text-xl);
    margin-bottom: 2rem;
    color: var(--gray-100);
  }

  @media (min-width: 768px) {
    .meta-container {
      grid-template-columns: 1fr 1fr;
    }

    .project-header {
      padding: 4rem 0 3rem;
    }
  }

  @media (max-width: 767px) {
    .cta-buttons {
      flex-direction: column;
      width: 100%;
    }

    .btn {
      width: 100%;
      justify-content: center;
    }

    .project-header {
      padding: 1rem 0 2rem;
    }
  }

  /* Modal and component animations */
  @keyframes modal-enter {
    from {
      opacity: 0;
      transform: scale(0.95) translateY(-10px);
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  :global(.animate-modal-enter) {
    animation: modal-enter 0.2s ease-out;
  }

  :global(.animate-fade-in) {
    animation: fade-in 0.3s ease-out;
  }

  /* Tech card styles */
  :global(.tech-card) {
    transition: all 0.2s ease;
  }

  :global(.tech-card:hover) {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  /* Line clamp utility */
  :global(.line-clamp-3) {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Enhanced project showcase */
  .project-showcase {
    position: relative;
  }

  .project-showcase::before {
    content: '';
    position: absolute;
    top: -20px;
    left: -20px;
    right: -20px;
    bottom: -20px;
    background: linear-gradient(45deg, var(--accent-light), var(--accent-secondary-light));
    border-radius: 1.5rem;
    opacity: 0.1;
    z-index: -1;
  }

  /* Improved content sections */
  .content-wrapper :global(.tabbed-interface) {
    margin-top: 2rem;
  }

  .content-wrapper :global(.tab-nav) {
    border-bottom: 2px solid var(--gray-800);
    margin-bottom: 2rem;
  }

  .content-wrapper :global(.feature-card) {
    border: 1px solid var(--gray-800);
    background: var(--gray-950);
  }

  .content-wrapper :global(.feature-card:hover) {
    border-color: var(--accent-regular);
    box-shadow: 0 8px 25px rgba(118, 17, 166, 0.15);
  }

  /* Tab styles */
  .project-tabs {
    margin-top: 2rem;
  }

  .tab-nav {
    border-bottom: 2px solid var(--gray-800);
    margin-bottom: 2rem;
  }

  .tab-btn {
    cursor: pointer;
    white-space: nowrap;
    transition: all 0.2s ease;
  }

  .tab-btn:hover:not(.active) {
    border-color: var(--gray-600);
  }

  .tab-panel {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>

<script>
  // Share project functionality
  function shareProject() {
    const shareBtn = document.querySelector('.share-btn');
    const projectTitle = document.querySelector('.project-title')?.textContent || 'Project';
    const projectUrl = window.location.href;

    if (navigator.share) {
      // Use native sharing if available
      navigator.share({
        title: projectTitle,
        url: projectUrl,
        text: `Check out this project: ${projectTitle}`
      }).catch(console.error);
    } else {
      // Fallback to clipboard
      navigator.clipboard.writeText(projectUrl).then(() => {
        shareBtn?.classList.add('copied');
        setTimeout(() => {
          shareBtn?.classList.remove('copied');
        }, 2000);
      }).catch(() => {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = projectUrl;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);

        shareBtn?.classList.add('copied');
        setTimeout(() => {
          shareBtn?.classList.remove('copied');
        }, 2000);
      });
    }
  }

  // Make function globally available
  window.shareProject = shareProject;

  // Tab functionality
  document.addEventListener('DOMContentLoaded', () => {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabPanels = document.querySelectorAll('.tab-panel');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetTab = button.getAttribute('data-tab');

        // Remove active class from all buttons
        tabButtons.forEach(btn => {
          btn.classList.remove('active', 'border-indigo-500', 'text-indigo-600', 'dark:text-indigo-400');
          btn.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'dark:text-gray-400', 'dark:hover:text-gray-200');
        });

        // Add active class to clicked button
        button.classList.add('active', 'border-indigo-500', 'text-indigo-600', 'dark:text-indigo-400');
        button.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'dark:text-gray-400', 'dark:hover:text-gray-200');

        // Hide all tab panels
        tabPanels.forEach(panel => {
          panel.classList.add('hidden');
          panel.classList.remove('active');
        });

        // Show target tab panel
        const targetPanel = document.getElementById(`${targetTab}-tab`);
        if (targetPanel) {
          targetPanel.classList.remove('hidden');
          targetPanel.classList.add('active');
        }
      });
    });
  });
</script>
</style>
