---
interface Props {
  variant?: "offset" | "small";
}

const { variant } = Astro.props;
---

<ul
  class:list={[
    "grid",
    { offset: variant === "offset", small: variant === "small" },
  ]}
>
  <slot />
</ul>

<style>
  .grid {
    display: grid;
    gap: var(--space-md);
    list-style: none;
    padding: 0;
    max-width: var(--container-max-width);
    margin-inline: auto;
    padding-inline: var(--container-padding);
    width: 100%;
  }

  .grid.small {
    grid-template-columns: 1fr;
    gap: var(--space-lg);
  }

  /* Ensure items in small grid have proper spacing and sizing */
  .grid.small > :global(*) {
    width: 100%;
    height: 100%;
    display: flex;
  }
  
  /* Optimisations mobile pour Grid */
  @media (max-width: 640px) {
    .grid {
      display: grid;
      grid-template-columns: 1fr;
      gap: 1.5rem;
      padding-inline: var(--container-padding);
      width: 100%;
      max-width: 100%;
    }

    /* Retirer l'effet de décalage sur mobile pour une meilleure lisibilité */
    .grid.offset > :global(:nth-child(odd)) {
      transform: none;
    }

    /* Ajuster la taille des éléments de la grille */
    .grid > :global(*) {
      width: 100%;
      margin-bottom: 0; /* Supprime la marge qui crée un double espacement */
    }

    /* Améliorer l'espacement pour la grille small */
    .grid.small {
      gap: 1.25rem;
    }

    /* Assurer que les éléments de la grille s'adaptent correctement */
    .grid.small > :global(*) {
      flex-direction: column;
    }
    
    /* Optimisation de l'affichage des cartes sur mobile */
    .grid > :global(.card) {
      border-radius: 12px;
      overflow: hidden;
      height: auto !important;
      min-height: 0 !important;
    }
    
    /* Ajuster l'espacement des textes dans les cartes */
    .grid > :global(.card-content) {
      padding: 1rem !important;
    }
    
    /* Adapter la taille des images dans les cartes */
    .grid > :global(.card img) {
      height: auto !important;
      max-height: 180px;
      object-fit: cover;
      width: 100%;
    }
  }

  /* Ajustements pour les petits mobiles */
  @media (max-width: 480px) {
    .grid {
      gap: 1.25rem;
    }

    .grid.small {
      gap: 1rem;
    }
    
    /* Réduire encore les espacements dans les cartes */
    .grid > :global(.card-content) {
      padding: 0.75rem !important;
    }
    
    /* Adapter davantage les images pour petits écrans */
    .grid > :global(.card img) {
      max-height: 160px;
    }
  }

  /* Ajustements pour les très petits écrans */
  @media (max-width: 380px) {
    .grid {
      gap: 1rem;
    }

    .grid.small {
      gap: 0.875rem;
    }
    
    /* Optimiser pour très petits écrans */
    .grid > :global(.card-content) {
      padding: 0.625rem !important;
    }
    
    .grid > :global(.card img) {
      max-height: 140px;
    }
    
    /* Ajuster la typographie dans les cartes */
    .grid > :global(.card h3) {
      font-size: 1.1rem !important;
      margin-bottom: 0.25rem !important;
    }
    
    .grid > :global(.card p) {
      font-size: 0.8rem !important;
      margin-bottom: 0.5rem !important;
    }
  }
  
  /* Tablettes et écrans moyens */
  @media (min-width: 641px) and (max-width: 47.9em) {
    .grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
    }
    
    .grid.small {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
    }
    
    /* Adapter les cartes pour tablettes */
    .grid > :global(.card) {
      height: 100%;
    }
    
    .grid > :global(.card img) {
      height: 160px;
      object-fit: cover;
    }
  }

  /* Écrans plus larges */
  @media (min-width: 48em) {
    .grid {
      grid-template-columns: 1fr 1fr;
      gap: 4rem;
    }

    .grid.offset {
      --row-offset: 7.5rem;
      padding-bottom: var(--row-offset);
    }

    /* Shift first item in each row vertically to create staggered effect. */
    .grid.offset > :global(:nth-child(odd)) {
      transform: translateY(var(--row-offset));
    }

    /* If last row contains only one item, display it in the second column. */
    .grid.offset > :global(:last-child:nth-child(odd)) {
      grid-column: 2 / 3;
      transform: none;
    }

    .grid.small {
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
    }

    .grid.small > :global(*) {
      flex-basis: auto;
      min-height: 100%;
    }
    
    /* If last row contains only one item, make it span both columns. */
    .grid.small > :global(:nth-child(odd):last-child) {
      grid-column: 1 / 3;
    }
  }
  
  @media (min-width: 75em) {
    .grid.small {
      grid-template-columns: 1fr 1fr 1fr;
      gap: 2rem;
    }

    /* Reset the span for last item on large screens */
    .grid.small > :global(:nth-child(odd):last-child) {
      grid-column: auto;
    }
  }
</style>
