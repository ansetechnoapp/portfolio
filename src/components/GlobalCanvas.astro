---
// Composant pour un canevas global fixe sur toutes les pages
---

<div class="global-canvas-container" style="z-index: 100;">
  <canvas id="globalCanvas"></canvas>
</div>

<style>
  .global-canvas-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 100;
    pointer-events: none;
  }

  #globalCanvas {
    width: 100%;
    height: 100%;
    display: block;
  }
</style>

<script>
  // Code d'animation du canevas (copié et adapté de Hero.astro)
  type Particle = {
    x: number;
    y: number;
    baseX: number;
    baseY: number;
    size: number;
    speedX: number;
    speedY: number;
    rotation: number;
    rotationSpeed: number;
    shape: number;
    opacity: number;
    phase: number;
    floatSpeed: number;
    color: string;
  };

  class GlobalCanvasAnimation {
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    particles: Array<Particle>;
    mouse: { x: number; y: number };
    time: number;
    gradientCache: Map<string, CanvasGradient>;
    lastFrameTime: number;
    targetFPS: number;
    frameInterval: number;
    isVisible: boolean;
    resizeTimeout: number | null;

    constructor(canvas: HTMLCanvasElement) {
      this.canvas = canvas;
      const ctx = canvas.getContext('2d');
      if (!ctx) throw new Error('Canvas 2D context not supported');
      this.ctx = ctx;
      this.particles = [];
      this.mouse = { x: 0, y: 0 };
      this.time = 0;
      this.gradientCache = new Map();
      this.lastFrameTime = 0;
      this.targetFPS = 60;
      this.frameInterval = 1000 / this.targetFPS;
      this.isVisible = true;
      this.resizeTimeout = null;
      
      this.resize();
      this.createParticles();
      this.setupEventListeners();
      this.animate();
    }

    setupEventListeners() {
      // Throttled resize handler
      window.addEventListener('resize', () => {
        if (this.resizeTimeout) clearTimeout(this.resizeTimeout);
        this.resizeTimeout = window.setTimeout(() => this.resize(), 150);
      });
      
      // Throttled mouse move handler
      let mouseTimeout: number | null = null;
      window.addEventListener('mousemove', (e) => {
        if (mouseTimeout) return;
        mouseTimeout = window.setTimeout(() => {
          const rect = this.canvas.getBoundingClientRect();
          this.mouse.x = e.clientX - rect.left;
          this.mouse.y = e.clientY - rect.top;
          mouseTimeout = null;
        }, 16); // ~60fps
      });
      
      // Visibility API for performance
      document.addEventListener('visibilitychange', () => {
        this.isVisible = !document.hidden;
      });
    }
    
    resize() {
      const dpr = window.devicePixelRatio || 1;
      const rect = this.canvas.getBoundingClientRect();
      
      this.canvas.width = rect.width * dpr;
      this.canvas.height = rect.height * dpr;
      this.canvas.style.width = rect.width + 'px';
      this.canvas.style.height = rect.height + 'px';
      
      this.ctx.scale(dpr, dpr);
      this.gradientCache.clear(); // Clear cache on resize
      
      // Recreate particles only if canvas size changed significantly
      if (this.particles.length > 0) {
        this.createParticles();
      }
    }
    
    createParticles() {
      // Dynamic particle count based on device performance
      const baseCount = Math.floor(window.innerWidth / 30);
      const maxParticles = window.innerWidth < 768 ? 30 : 50; // Fewer on mobile
      const particleCount = Math.min(maxParticles, baseCount);
      
      this.particles = [];
      const colors = ['#14b8a6', '#7611a6', '#6366f1', '#f59e0b'];
      
      for (let i = 0; i < particleCount; i++) {
        this.particles.push({
          x: Math.random() * this.canvas.width,
          y: Math.random() * this.canvas.height,
          baseX: Math.random() * this.canvas.width,
          baseY: Math.random() * this.canvas.height,
          size: Math.random() * 3 + 1.5, // Slightly smaller for performance
          speedX: (Math.random() - 0.5) * 0.6,
          speedY: (Math.random() - 0.5) * 0.6,
          rotation: Math.random() * Math.PI * 2,
          rotationSpeed: (Math.random() - 0.5) * 0.015,
          shape: Math.floor(Math.random() * 4),
          opacity: Math.random() * 0.5 + 0.2,
          phase: Math.random() * Math.PI * 2,
          floatSpeed: Math.random() * 0.015 + 0.008,
          color: colors[Math.floor(Math.random() * colors.length)]
        });
      }
    }
    
    getOrCreateGradient(color: string, size: number): CanvasGradient {
      const key = `${color}-${size}`;
      if (this.gradientCache.has(key)) {
        return this.gradientCache.get(key)!;
      }
      
      const gradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, size * 2);
      gradient.addColorStop(0, color + '80');
      gradient.addColorStop(0.5, color + '40');
      gradient.addColorStop(1, 'transparent');
      
      this.gradientCache.set(key, gradient);
      return gradient;
    }

    drawParticle(particle: Particle) {
      this.ctx.save();
      this.ctx.translate(particle.x, particle.y);
      this.ctx.rotate(particle.rotation);
      this.ctx.globalAlpha = particle.opacity;
      
      const gradient = this.getOrCreateGradient(particle.color, particle.size);
      this.ctx.fillStyle = gradient;
      
      switch (particle.shape) {
        case 0: // Circle
          this.ctx.beginPath();
          this.ctx.arc(0, 0, particle.size, 0, Math.PI * 2);
          this.ctx.fill();
          this.ctx.fillStyle = particle.color + 'CC';
          this.ctx.beginPath();
          this.ctx.arc(0, 0, particle.size * 0.4, 0, Math.PI * 2);
          this.ctx.fill();
          break;
        case 1: // Square
          this.ctx.fillRect(-particle.size, -particle.size, particle.size * 2, particle.size * 2);
          this.ctx.fillStyle = particle.color + 'CC';
          this.ctx.fillRect(-particle.size * 0.4, -particle.size * 0.4, particle.size * 0.8, particle.size * 0.8);
          break;
        case 2: // Triangle
          this.ctx.beginPath();
          this.ctx.moveTo(0, -particle.size);
          this.ctx.lineTo(-particle.size * 0.866, particle.size * 0.5);
          this.ctx.lineTo(particle.size * 0.866, particle.size * 0.5);
          this.ctx.closePath();
          this.ctx.fill();
          this.ctx.fillStyle = particle.color + 'CC';
          this.ctx.beginPath();
          this.ctx.moveTo(0, -particle.size * 0.4);
          this.ctx.lineTo(-particle.size * 0.346, particle.size * 0.2);
          this.ctx.lineTo(particle.size * 0.346, particle.size * 0.2);
          this.ctx.closePath();
          this.ctx.fill();
          break;
        case 3: // Hexagon
          this.ctx.beginPath();
          for (let i = 0; i < 6; i++) {
            const angle = (i / 6) * Math.PI * 2;
            const x = Math.cos(angle) * particle.size;
            const y = Math.sin(angle) * particle.size;
            if (i === 0) {
              this.ctx.moveTo(x, y);
            } else {
              this.ctx.lineTo(x, y);
            }
          }
          this.ctx.closePath();
          this.ctx.fill();
          this.ctx.fillStyle = particle.color + 'CC';
          this.ctx.beginPath();
          for (let i = 0; i < 6; i++) {
            const angle = (i / 6) * Math.PI * 2;
            const x = Math.cos(angle) * particle.size * 0.4;
            const y = Math.sin(angle) * particle.size * 0.4;
            if (i === 0) {
              this.ctx.moveTo(x, y);
            } else {
              this.ctx.lineTo(x, y);
            }
          }
          this.ctx.closePath();
          this.ctx.fill();
          break;
      }
      this.ctx.restore();
    }
    
    drawConnections() {
      const maxDistance = 100; // Reduced for better performance
      const maxDistanceSquared = maxDistance * maxDistance;
      const maxConnections = 3; // Limit connections per particle
      
      this.ctx.lineWidth = 1;
      
      for (let i = 0; i < this.particles.length; i++) {
        let connectionCount = 0;
        
        for (let j = i + 1; j < this.particles.length && connectionCount < maxConnections; j++) {
          const dx = this.particles[i].x - this.particles[j].x;
          const dy = this.particles[i].y - this.particles[j].y;
          const distanceSquared = dx * dx + dy * dy;
          
          if (distanceSquared < maxDistanceSquared) {
            const distance = Math.sqrt(distanceSquared);
            const opacity = (maxDistance - distance) / maxDistance * 0.12;
            
            this.ctx.strokeStyle = `rgba(20, 184, 166, ${opacity})`;
            this.ctx.beginPath();
            this.ctx.moveTo(this.particles[i].x, this.particles[i].y);
            this.ctx.lineTo(this.particles[j].x, this.particles[j].y);
            this.ctx.stroke();
            
            connectionCount++;
          }
        }
      }
    }
    
    animate(currentTime: number = 0) {
      // Skip frame if not visible or if frame rate is too high
      if (!this.isVisible || (currentTime - this.lastFrameTime < this.frameInterval)) {
        requestAnimationFrame((time) => this.animate(time));
        return;
      }
      
      this.lastFrameTime = currentTime;
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.time += 0.008; // Slightly slower for smoother animation
      
      // Draw connections first (behind particles)
      this.drawConnections();
      
      // Batch particle updates for better performance
      const mouseDistanceThreshold = 80;
      const mouseDistanceSquared = mouseDistanceThreshold * mouseDistanceThreshold;
      const buffer = 30; // Reduced buffer for better performance
      
      for (let i = 0; i < this.particles.length; i++) {
        const particle = this.particles[i];
        
        // Mouse interaction (optimized)
        const dx = this.mouse.x - particle.x;
        const dy = this.mouse.y - particle.y;
        const distanceSquared = dx * dx + dy * dy;
        
        if (distanceSquared < mouseDistanceSquared) {
          const distance = Math.sqrt(distanceSquared);
          const force = (mouseDistanceThreshold - distance) / mouseDistanceThreshold;
          particle.x -= dx * force * 0.002;
          particle.y -= dy * force * 0.002;
        }
        
        // Movement with floating effect
        particle.x += particle.speedX + Math.sin(this.time * particle.floatSpeed + particle.phase) * 0.4;
        particle.y += particle.speedY + Math.cos(this.time * particle.floatSpeed + particle.phase) * 0.25;
        
        // Rotation
        particle.rotation += particle.rotationSpeed;
        
        // Opacity pulsing
        particle.opacity = 0.25 + Math.sin(this.time * 1.5 + particle.phase) * 0.15;
        
        // Edge wrapping with smaller buffer
        if (particle.x < -buffer) particle.x = this.canvas.width + buffer;
        else if (particle.x > this.canvas.width + buffer) particle.x = -buffer;
        if (particle.y < -buffer) particle.y = this.canvas.height + buffer;
        else if (particle.y > this.canvas.height + buffer) particle.y = -buffer;
        
        this.drawParticle(particle);
      }
      
      requestAnimationFrame((time) => this.animate(time));
    }
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.getElementById('globalCanvas') as HTMLCanvasElement;
    if (canvas) new GlobalCanvasAnimation(canvas);
  });
</script>